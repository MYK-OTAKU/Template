import { api } from '../api/apiService';

class RoleService {
  /**
   * R√©cup√©rer tous les r√¥les avec leurs permissions
   */
  async getAllRoles() {
    try {
      console.log('üìã [ROLE_SERVICE] R√©cup√©ration de tous les r√¥les...');
      
      const response = await api.get('/roles');
      console.log('‚úÖ [ROLE_SERVICE] R√¥les r√©cup√©r√©s:', response);
      
      return {
        success: true,
        data: response.data || [],
        count: response.count || 0,
        message: response.message || 'R√¥les r√©cup√©r√©s avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [ROLE_SERVICE] Erreur r√©cup√©ration r√¥les:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des r√¥les');
    }
  }

  /**
   * R√©cup√©rer un r√¥le par ID
   */
  async getRoleById(id) {
    try {
      console.log(`üîç [ROLE_SERVICE] R√©cup√©ration du r√¥le ID: ${id}`);
      
      const response = await api.get(`/roles/${id}`);
      console.log('‚úÖ [ROLE_SERVICE] R√¥le r√©cup√©r√©:', response);
      
      return {
        success: true,
        data: response.data,
        message: response.message || 'R√¥le r√©cup√©r√© avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [ROLE_SERVICE] Erreur r√©cup√©ration r√¥le:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration du r√¥le');
    }
  }

  /**
   * Cr√©er un nouveau r√¥le
   */
  async createRole(roleData) {
    try {
      console.log('‚ûï [ROLE_SERVICE] Cr√©ation du r√¥le:', roleData);
      
      const response = await api.post('/roles', roleData);
      console.log('‚úÖ [ROLE_SERVICE] R√¥le cr√©√©:', response);
      
      return {
        success: true,
        data: response.data,
        message: response.message || 'R√¥le cr√©√© avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [ROLE_SERVICE] Erreur cr√©ation r√¥le:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la cr√©ation du r√¥le');
    }
  }

  /**
   * Mettre √† jour un r√¥le
   */
  async updateRole(id, roleData) {
    try {
      console.log(`‚úèÔ∏è [ROLE_SERVICE] Modification du r√¥le ID: ${id}`, roleData);
      
      const response = await api.put(`/roles/${id}`, roleData);
      console.log('‚úÖ [ROLE_SERVICE] R√¥le modifi√©:', response);
      
      return {
        success: true,
        data: response.data,
        message: response.message || 'R√¥le modifi√© avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [ROLE_SERVICE] Erreur modification r√¥le:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la modification du r√¥le');
    }
  }

  /**
   * Supprimer un r√¥le
   */
  async deleteRole(id) {
    try {
      console.log(`üóëÔ∏è [ROLE_SERVICE] Suppression du r√¥le ID: ${id}`);
      
      const response = await api.delete(`/roles/${id}`);
      console.log('‚úÖ [ROLE_SERVICE] R√¥le supprim√©');
      
      return {
        success: true,
        message: response.message || 'R√¥le supprim√© avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [ROLE_SERVICE] Erreur suppression r√¥le:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la suppression du r√¥le');
    }
  }

  /**
   * R√©cup√©rer les permissions d'un r√¥le
   */
  async getRolePermissions(id) {
    try {
      console.log(`üîë [ROLE_SERVICE] R√©cup√©ration des permissions du r√¥le ID: ${id}`);
      
      const response = await api.get(`/roles/${id}/permissions`);
      console.log('‚úÖ [ROLE_SERVICE] Permissions du r√¥le r√©cup√©r√©es:', response);
      
      return {
        success: true,
        data: response.data,
        message: response.message || 'Permissions du r√¥le r√©cup√©r√©es avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [ROLE_SERVICE] Erreur r√©cup√©ration permissions:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des permissions');
    }
  }

  /**
   * Assigner des permissions √† un r√¥le
   */
  async assignPermissionsToRole(id, permissions) {
    try {
      console.log(`üîó [ROLE_SERVICE] Attribution des permissions au r√¥le ID: ${id}`, permissions);
      
      const response = await api.post(`/roles/${id}/permissions`, { permissions });
      console.log('‚úÖ [ROLE_SERVICE] Permissions attribu√©es:', response);
      
      return {
        success: true,
        data: response.data,
        message: response.message || 'Permissions attribu√©es avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [ROLE_SERVICE] Erreur attribution permissions:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de l\'attribution des permissions');
    }
  }
}

const roleService = new RoleService();
export default roleService;