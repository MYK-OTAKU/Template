import { api } from '../api/apiService';

class MonitoringService {
  // ‚úÖ R√©cup√©rer les sessions actives
  async getActiveSessions(params = {}) {
    try {
      console.log('üìä [MONITORING] R√©cup√©ration des sessions actives');
      
      const response = await api.get('/monitoring/sessions', {
        params: {
          inactivityPeriod: 30,
          ...params
        }
      });
      
      // ‚úÖ CORRECTION: Retour direct car api.interceptor retourne d√©j√† response.data
      console.log('‚úÖ [MONITORING] Sessions r√©cup√©r√©es:', response);
      return response;
    } catch (error) {
      console.error('‚ùå [MONITORING] Erreur r√©cup√©ration sessions:', error);
      throw error;
    }
  }

  // ‚úÖ R√©cup√©rer les logs d'activit√©
  async getActivityLogs(params = {}) {
    try {
      console.log('üìã [MONITORING] R√©cup√©ration logs d\'activit√©');
      
      const response = await api.get('/monitoring/activities', {
        params: {
          page: 1,
          limit: 50,
          ...params
        }
      });
      
      // ‚úÖ CORRECTION: Retour direct car api.interceptor retourne d√©j√† response.data
      console.log('‚úÖ [MONITORING] Logs r√©cup√©r√©s:', response);
      return response;
    } catch (error) {
      console.error('‚ùå [MONITORING] Erreur r√©cup√©ration logs:', error);
      throw error;
    }
  }

  // ‚úÖ R√©cup√©rer les statistiques d'activit√©
  async getActivityStats(days = 30) {
    try {
      console.log(`üìä [MONITORING] R√©cup√©ration statistiques (${days} jours)`);
      
      const response = await api.get('/monitoring/activities/stats', {
        params: { days }
      });
      
      console.log('‚úÖ [MONITORING] Statistiques r√©cup√©r√©es:', response);
      return response;
    } catch (error) {
      console.error('‚ùå [MONITORING] Erreur r√©cup√©ration statistiques:', error);
      throw error;
    }
  }

  // ‚úÖ R√©cup√©rer l'historique de connexion d'un utilisateur
  async getUserConnectionHistory(userId, params = {}) {
    try {
      console.log(`üë§ [MONITORING] R√©cup√©ration historique utilisateur ${userId}`);
      
      const response = await api.get(`/monitoring/users/${userId}/connections`, {
        params: {
          page: 1,
          limit: 20,
          ...params
        }
      });
      
      console.log('‚úÖ [MONITORING] Historique r√©cup√©r√©:', response);
      return response;
    } catch (error) {
      console.error('‚ùå [MONITORING] Erreur r√©cup√©ration historique:', error);
      throw error;
    }
  }

  // ‚úÖ R√©cup√©rer les activit√©s d'un utilisateur
  async getUserActivities(userId, params = {}) {
    try {
      console.log(`üë§ [MONITORING] R√©cup√©ration activit√©s utilisateur ${userId}`);
      
      const response = await api.get(`/monitoring/users/${userId}/activities`, {
        params: {
          page: 1,
          limit: 50,
          ...params
        }
      });
      
      console.log('‚úÖ [MONITORING] Activit√©s r√©cup√©r√©es:', response);
      return response;
    } catch (error) {
      console.error('‚ùå [MONITORING] Erreur r√©cup√©ration activit√©s:', error);
      throw error;
    }
  }

  // ‚úÖ Terminer une session
  async terminateSession(sessionId) {
    try {
      console.log(`üõë [MONITORING] Terminaison session ${sessionId}`);
      
      const response = await api.delete(`/monitoring/sessions/${sessionId}`);
      
      console.log('‚úÖ [MONITORING] Session termin√©e:', response);
      return response;
    } catch (error) {
      console.error('‚ùå [MONITORING] Erreur terminaison session:', error);
      throw error;
    }
  }

  // ‚úÖ R√©cup√©rer les actions disponibles
  async getAvailableActions() {
    try {
      console.log('üìã [MONITORING] R√©cup√©ration actions disponibles');
      
      const response = await api.get('/monitoring/activities/actions');
      
      console.log('‚úÖ [MONITORING] Actions r√©cup√©r√©es:', response);
      return response;
    } catch (error) {
      console.error('‚ùå [MONITORING] Erreur r√©cup√©ration actions:', error);
      throw error;
    }
  }

  // ‚úÖ R√©cup√©rer les stats du dashboard
  async getDashboardStats() {
    try {
      console.log('üìä [MONITORING] R√©cup√©ration stats dashboard');
      
      const response = await api.get('/monitoring/dashboard/stats');
      
      console.log('‚úÖ [MONITORING] Stats dashboard r√©cup√©r√©es:', response);
      return response;
    } catch (error) {
      console.error('‚ùå [MONITORING] Erreur stats dashboard:', error);
      throw error;
    }
  }
}

export const monitoringService = new MonitoringService();
export default monitoringService;