import { api } from '../api/apiService';

const userService = {
  // R√©cup√©rer tous les utilisateurs
  getAllUsers: async () => {
    try {
      console.log('üì° Appel API: GET /users');
      const response = await api.get('/users');
      console.log('‚úÖ R√©ponse getAllUsers:', response);
      return response; // apiService g√®re d√©j√† response.data
    } catch (error) {
      console.error("‚ùå Erreur dans getAllUsers:", error);
      throw error;
    }
  },
  
  // R√©cup√©rer un utilisateur par ID
  getUserById: async (id) => {
    try {
      console.log('üì° Appel API: GET /users/' + id);
      const response = await api.get(`/users/${id}`);
      console.log('‚úÖ R√©ponse getUserById:', response);
      return response;
    } catch (error) {
      console.error("‚ùå Erreur dans getUserById:", error);
      throw error;
    }
  },
  
  // R√©cup√©rer le profil de l'utilisateur connect√©
  getUserProfile: async () => {
    try {
      console.log('üì° Appel API: GET /users/profile');
      const response = await api.get('/users/profile');
      console.log('‚úÖ R√©ponse getUserProfile:', response);
      return response;
    } catch (error) {
      console.error("‚ùå Erreur dans getUserProfile:", error);
      throw error;
    }
  },
  
  // Cr√©er un utilisateur avec la nouvelle logique hi√©rarchique
  createUser: async (userData) => {
    try {
      console.log('üì° Appel API: POST /users', userData);
      const response = await api.post('/users', userData);
      console.log('‚úÖ R√©ponse createUser:', response);
      return response;
    } catch (error) {
      console.error("‚ùå Erreur dans createUser:", error);
      throw error;
    }
  },
  
  // Mettre √† jour un utilisateur avec contr√¥les hi√©rarchiques
  updateUser: async (id, userData) => {
    try {
      console.log('üì° Appel API: PUT /users/' + id, userData);
      const response = await api.put(`/users/${id}`, userData);
      console.log('‚úÖ R√©ponse updateUser:', response);
      return response;
    } catch (error) {
      console.error("‚ùå Erreur dans updateUser:", error);
      throw error;
    }
  },
  
  // Supprimer un utilisateur
  deleteUser: async (id) => {
    try {
      console.log('üì° Appel API: DELETE /users/' + id);
      const response = await api.delete(`/users/${id}`);
      console.log('‚úÖ R√©ponse deleteUser:', response);
      return response;
    } catch (error) {
      console.error("‚ùå Erreur dans deleteUser:", error);
      throw error;
    }
  },
  
  // Activer un utilisateur
  activateUser: async (id) => {
    try {
      console.log('üì° Appel API: PUT /users/' + id + '/activate');
      const response = await api.put(`/users/${id}/activate`);
      console.log('‚úÖ R√©ponse activateUser:', response);
      return response;
    } catch (error) {
      console.error("‚ùå Erreur dans activateUser:", error);
      throw error;
    }
  },
  
  // D√©sactiver un utilisateur
  deactivateUser: async (id) => {
    try {
      console.log('üì° Appel API: PUT /users/' + id + '/deactivate');
      const response = await api.put(`/users/${id}/deactivate`);
      console.log('‚úÖ R√©ponse deactivateUser:', response);
      return response;
    } catch (error) {
      console.error("‚ùå Erreur dans deactivateUser:", error);
      throw error;
    }
  },
  
  // Changer le r√¥le d'un utilisateur
  changeUserRole: async (userId, roleId) => {
    try {
      console.log('üì° Appel API: POST /users/change-role', { userId, roleId });
      const response = await api.post('/users/change-role', { userId, roleId });
      console.log('‚úÖ R√©ponse changeUserRole:', response);
      return response;
    } catch (error) {
      console.error("‚ùå Erreur dans changeUserRole:", error);
      
      // G√©rer les erreurs sp√©cifiques
      if (error.response?.data?.errorCode === 'INSUFFICIENT_ROLE_PERMISSIONS') {
        throw {
          ...error,
          userMessage: `Vous n'avez pas les droits pour effectuer ce changement de r√¥le`
        };
      }
      
      throw error;
    }
  }
};

export { userService };
export default userService;