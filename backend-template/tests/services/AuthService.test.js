const AuthService = require('../../services/AuthService');
const { TestFactory } = require('../helpers/testHelpers');
const { User } = require('../../models');
const speakeasy = require('speakeasy');

describe('üîß AuthService - Tests des Services d\'Authentification', () => {
  let testUser;

  beforeEach(async () => {
    testUser = await TestFactory.createAdminUser();
  });

  describe('üîê enableTwoFactor - Tests d\'Activation 2FA', () => {
    it('‚úÖ Doit activer 2FA pour la premi√®re fois', async () => {
      const result = await AuthService.enableTwoFactor(testUser.id, false);

      expect(result.success).toBe(true);
      expect(result.qrCode).toBeDefined();
      expect(result.manualEntryKey).toBeDefined();
      expect(result.isNewSetup).toBe(true);
      expect(result.isReactivation).toBe(false);

      // V√©rifier en base
      const updatedUser = await User.findByPk(testUser.id);
      expect(updatedUser.twoFactorEnabled).toBe(true);
      expect(updatedUser.twoFactorSecret).toBeTruthy();
    });

    it('‚úÖ Doit d√©tecter une r√©activation apr√®s d√©sactivation', async () => {
      // 1. Activer 2FA
      await AuthService.enableTwoFactor(testUser.id, false);
      
      // 2. D√©sactiver 2FA en gardant le secret
      await AuthService.disableTwoFactor(testUser.id, true);
      
      // 3. R√©activer 2FA
      const result = await AuthService.enableTwoFactor(testUser.id, false);

      expect(result.success).toBe(true);
      expect(result.isReactivation).toBe(true);
      expect(result.isNewSetup).toBe(true);
      expect(result.qrCode).toBeDefined();
    });
  });

  describe('üîì disableTwoFactor - Tests de D√©sactivation 2FA', () => {
    beforeEach(async () => {
      // Activer 2FA d'abord
      await AuthService.enableTwoFactor(testUser.id, false);
    });

    it('‚úÖ Doit d√©sactiver 2FA et supprimer le secret', async () => {
      const result = await AuthService.disableTwoFactor(testUser.id, false);

      expect(result.success).toBe(true);
      expect(result.secretRemoved).toBe(true);

      // V√©rifier en base
      const updatedUser = await User.findByPk(testUser.id);
      expect(updatedUser.twoFactorEnabled).toBe(false);
      expect(updatedUser.twoFactorSecret).toBeNull();
    });

    it('‚úÖ Doit d√©sactiver 2FA en conservant le secret', async () => {
      const result = await AuthService.disableTwoFactor(testUser.id, true);

      expect(result.success).toBe(true);
      expect(result.secretRemoved).toBe(false);

      // V√©rifier en base
      const updatedUser = await User.findByPk(testUser.id);
      expect(updatedUser.twoFactorEnabled).toBe(false);
      expect(updatedUser.twoFactorSecret).toBeTruthy();
    });
  });

  describe('üîÑ regenerateTwoFactorSecret - Tests de R√©g√©n√©ration', () => {
    beforeEach(async () => {
      // Activer 2FA d'abord
      await AuthService.enableTwoFactor(testUser.id, false);
    });

    it('‚úÖ Doit r√©g√©n√©rer le secret 2FA', async () => {
      const oldUser = await User.findByPk(testUser.id);
      const oldSecret = oldUser.twoFactorSecret;

      const result = await AuthService.regenerateTwoFactorSecret(testUser.id);

      expect(result.success).toBe(true);
      expect(result.isRegeneration).toBe(true);
      expect(result.qrCode).toBeDefined();

      // V√©rifier que le secret a chang√©
      const updatedUser = await User.findByPk(testUser.id);
      expect(updatedUser.twoFactorSecret).not.toBe(oldSecret);
      expect(updatedUser.twoFactorEnabled).toBe(true);
    });
  });
});