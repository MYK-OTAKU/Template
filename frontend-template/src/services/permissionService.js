import { api } from '../api/apiService';

class PermissionService {
  /**
   * R√©cup√©rer toutes les permissions
   */
  async getAllPermissions() {
    try {
      console.log('üîë [PERMISSION_SERVICE] R√©cup√©ration de toutes les permissions...');
      
      const response = await api.get('/permissions');
      console.log('‚úÖ [PERMISSION_SERVICE] Permissions r√©cup√©r√©es:', response);
      
      return {
        success: true,
        data: response.data || [],
        message: response.message || 'Permissions r√©cup√©r√©es avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [PERMISSION_SERVICE] Erreur r√©cup√©ration permissions:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des permissions');
    }
  }

  /**
   * R√©cup√©rer une permission par ID
   */
  async getPermissionById(id) {
    try {
      console.log(`üîç [PERMISSION_SERVICE] R√©cup√©ration de la permission ID: ${id}`);
      
      const response = await api.get(`/permissions/${id}`);
      console.log('‚úÖ [PERMISSION_SERVICE] Permission r√©cup√©r√©e:', response);
      
      return {
        success: true,
        data: response.data,
        message: response.message || 'Permission r√©cup√©r√©e avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [PERMISSION_SERVICE] Erreur r√©cup√©ration permission:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration de la permission');
    }
  }

  /**
   * Cr√©er une nouvelle permission
   */
  async createPermission(permissionData) {
    try {
      console.log('‚ûï [PERMISSION_SERVICE] Cr√©ation de la permission:', permissionData);
      
      const response = await api.post('/permissions', permissionData);
      console.log('‚úÖ [PERMISSION_SERVICE] Permission cr√©√©e:', response);
      
      return {
        success: true,
        data: response.data,
        message: response.message || 'Permission cr√©√©e avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [PERMISSION_SERVICE] Erreur cr√©ation permission:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la cr√©ation de la permission');
    }
  }

  /**
   * Mettre √† jour une permission
   */
  async updatePermission(id, permissionData) {
    try {
      console.log(`‚úèÔ∏è [PERMISSION_SERVICE] Modification de la permission ID: ${id}`, permissionData);
      
      const response = await api.put(`/permissions/${id}`, permissionData);
      console.log('‚úÖ [PERMISSION_SERVICE] Permission modifi√©e:', response);
      
      return {
        success: true,
        data: response.data,
        message: response.message || 'Permission modifi√©e avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [PERMISSION_SERVICE] Erreur modification permission:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la modification de la permission');
    }
  }

  /**
   * Supprimer une permission
   */
  async deletePermission(id) {
    try {
      console.log(`üóëÔ∏è [PERMISSION_SERVICE] Suppression de la permission ID: ${id}`);
      
      const response = await api.delete(`/permissions/${id}`);
      console.log('‚úÖ [PERMISSION_SERVICE] Permission supprim√©e');
      
      return {
        success: true,
        message: response.message || 'Permission supprim√©e avec succ√®s'
      };
    } catch (error) {
      console.error('‚ùå [PERMISSION_SERVICE] Erreur suppression permission:', error);
      throw new Error(error.response?.data?.message || 'Erreur lors de la suppression de la permission');
    }
  }
}

const permissionService = new PermissionService();
export default permissionService;